image: python:3.8

variables:
  # This variable holds the path to the container registry image associated with the project.
  # Don't need to set this manually; GitLab automatically provides this based on the project's registry.
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE

  # This variable holds the short version of the commit SHA (a unique identifier for each commit).
  # This is automatically provided by GitLab and doesn't need to be set manually.
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA

stages:
  - prepare
  - build
  - tests

# Don't need to manually set these variables or services. 
# They are configured to ensure that Docker can run properly inside CI jobs. 
.docker_common: &docker_common
  image: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:20.10.5-dind

build_image:
  stage: build
  <<: *docker_common
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag ${DOCKER_IMAGE}:${DOCKER_TAG} --tag ${DOCKER_IMAGE}:latest .
    - docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
    - docker push ${DOCKER_IMAGE}:latest

unit_tests:
  stage: tests
  <<: *docker_common
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
    - docker run ${DOCKER_IMAGE}:${DOCKER_TAG} bash -c 'make run_unit_tests'
  needs:
    - build_image

integration_tests:
  stage: tests
  <<: *docker_common
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
    - docker run ${DOCKER_IMAGE}:${DOCKER_TAG} bash -c 'make run_integration_tests'
  needs:
    - build_image
